#!/usr/bin/env python3

import argparse
import sys
import csv
import re
import itertools
import textwrap
from Bio import SeqIO

def usage_and_quit(ret=0):
    print(textwrap.dedent('''\
                A2M Utility
                ===========

                Usage: a2mtool <tool> [options]

                The following tools are available:

                rmlower     Remove lower case characters
                reqchars    Require non-gap chars at specified positions

                For help on the tools use "a2mtool <tool> -h".
                '''))
    sys.exit(ret)

def parse_pos_ranges(ranges):
    def helper(r):
        r = r.split('-')[:2]
        r = [ int(x) for x in r ] if r[0] else [-int(r[1])]
        if len(r) == 1:
            return range(r[0]-1, r[0]) if r[0] >= 0 else range(r[0], 0) # Allows '-n' to specify last n chars
        if r[0] > r[1]:
            return range(0,0)
        return range(r[0]-1, r[1])
    ranges = ( helper(r) for r in ranges )
    return list(itertools.chain(*ranges))

####################################################################################################
# OUTER ARGUMENT HANDLING
####################################################################################################

sys.argv.pop(0) # Remove program name
if not sys.argv:
    usage_and_quit(1)

####################################################################################################
# RMLOWER
####################################################################################################

elif sys.argv[0] == 'rmlower':
    parser = argparse.ArgumentParser(description = "Remove lowercase characters from sequences")
    parser.add_argument('--in', dest='infile', type = argparse.FileType('r'), default = sys.stdin, help = "Input file (A2M)")
    parser.add_argument('--out', dest='outfile', type = argparse.FileType('w'), default = sys.stdout, help = "Input file (A2M)")
    args = parser.parse_args()

    for record in SeqIO.parse(args.infile, 'fasta'):
        print('>' + str(record.id), file = args.outfile)
        print(''.join([ char for char in record.seq if char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ-' ]), file = args.outfile)

####################################################################################################
# REQCHARS
####################################################################################################

elif sys.argv[0] == 'reqchars':
    parser = argparse.ArgumentParser(description = "Remove lowercase characters from sequences")
    parser.add_argument('--in', dest='infile', type = argparse.FileType('r'), default = sys.stdin, help = "Input file (A2M)")
    parser.add_argument('--out', dest='outfile', type = argparse.FileType('w'), default = sys.stdout, help = "Input file (A2M)")
    parser.add_argument('--pos', dest='pos', type = str, nargs = '+', help = "Positions where gaps are disallowed. Either range (n-m) or single position (n). Multiple values can be specified.")
    args = parser.parse_args()

    try:
        sel = parse_pos_ranges(args.pos)
        print("Positions: {}".format(sel), file = sys.stderr)
    except ValueError:
        print("Invalid position specification", file = sys.stderr)
        sys.exit(1)

    for record in SeqIO.parse(args.infile, 'fasta'):
        seq = str(record.seq)
        seq_sel = [ seq[i] == '-' for i in sel ]
        if all(seq_sel):
            print("Dropping '{}'.".format(record.id), file = sys.stderr)
        else:
            print('>{fastaid}\n{seq}'.format(fastaid=record.id, seq=seq), file = args.outfile)

elif '-h' in sys.argv or '--help' in sys.argv:
    usage_and_quit(0)
else:
    usage_and_quit(1)

